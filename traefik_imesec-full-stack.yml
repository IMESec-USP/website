version: "3.4"
services:
  traefik:
    image: "traefik:v2.0"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=default"
      # - "--providers.docker.endpoint=tcp://127.0.0.1:2375"
      - "--providers.docker.swarmMode=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=imesec@ime.usp.br"
      - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=websecure"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/services/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    deploy:
      labels:
        # global redirect to https
        - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"

        # middleware redirect
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"  
      placement:
        constraints: [node.role == manager]

  whoami:
    image: jwilder/whoami
    environment:
      VIRTUAL_HOST: who.imesec.ime.usp.br
      LETSENCRYPT_HOST: who.imesec.ime.usp.br
    deploy:
      replicas: 2
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.whoami.rule=Host(`who.imesec.ime.usp.br`)"
        # - "traefik.http.routers.whoami.tls.certresolver=le"
        - "traefik.http.routers.whoami.entrypoints=web,websecure"
        # - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.services.whoami.loadbalancer.server.port=8000"


  lh-web:
    image: razgrizone/lightning-hacks-website
    environment:
      VIRTUAL_HOST: lh.imesec.ime.usp.br
      LETSENCRYPT_HOST: lh.imesec.ime.usp.br
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.lh-web.rule=Host(`lh.imesec.ime.usp.br`)"
        - "traefik.http.routers.lh-web.tls.certresolver=le"
        # - "traefik.http.routers.lh-web.entrypoints=websecure"
        - "traefik.http.services.lh-web.loadbalancer.server.port=5000"
      replicas: 2
      restart_policy:
        condition: any
        delay: "0"

  # lh-api:
  #   image: razgrizone/lightning-hacks-api
  #   environment:
  #     VIRTUAL_HOST: api.lh.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: api.lh.imesec.ime.usp.br
  #     VIRTUAL_PORT: 5000
  #   deploy:
  #     replicas: 2
  #     restart_policy:
  #       condition: any
  #       delay: "0"
  #   volumes:
  #     - /services/tokens/lh-api.pickle:/data/token.pickle

  # lh-timer:
  #   image: razgrizone/lightning-hacks-timer
  #   environment:
  #     VIRTUAL_HOST: timer.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: timer.imesec.ime.usp.br
  #   deploy:
  #     replicas: 2
  #     restart_policy:
  #       condition: any
  #       delay: "0"

  # visualizer:
  #   image: dockersamples/visualizer:stable
  #   ports:
  #     - "8999:8080"
  #   environment:
  #     VIRTUAL_HOST: swarm.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: swarm.imesec.ime.usp.br
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]

  # nginx-website:
  #   image: richarvey/nginx-php-fpm:latest
  #   deploy:
  #     replicas: 2
  #     restart_policy:
  #       condition: any
  #       delay: "0"
  #   environment:
  #     GIT_EMAIL: imesec@ime.usp.br
  #     GIT_NAME: imesec
  #     GIT_REPO: https://github.com/IMEsec-USP/website.git
  #     VIRTUAL_HOST: imesec.ime.usp.br
  #     LETSENCRYPT_HOST: imesec.ime.usp.br
  #     WEBROOT: /var/www/html/website/
      
  # nginx-proxy:
  #   image: jwilder/nginx-proxy
  #   ports:
  #     - "81:80"
  #     - "444:443"
  #   environment:
  #     DHPARAM_GENERATION: "false"
  #     DEBUG: "true"
  #   labels:
  #     - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy"
  #     #- "com.github.jrcs.letsencrypt_nginx_proxy_companion.docker_gen"
  #   volumes:
  #     - /services/docker-compose/nginx-proxy/data/conf.d/:/etc/nginx/conf.d/
  #     - /services/docker-compose/nginx-proxy/data/conf.mount/:/etc/nginx/conf.mount/
  #     - /services/docker-compose/nginx-proxy/data/certs:/etc/nginx/certs
  #     - /services/docker-compose/nginx-proxy/data/vhosts:/etc/nginx/vhost.d
  #     - /services/docker-compose/nginx-proxy/data/html:/usr/share/nginx/html
  #     - /services/docker-compose/nginx-proxy/data/nginx.conf:/etc/nginx/nginx.conf
  #     - /var/run/docker.sock:/tmp/docker.sock:ro
  #   deploy:
  #     placement:
  #       constraints: [node.role == manager]

  # letsencrypt-companion:
  #   image: jrcs/letsencrypt-nginx-proxy-companion
  #   volumes:
  #     - /services/docker-compose/nginx-proxy/data/conf.d/:/etc/nginx/conf.d/
  #     - /services/docker-compose/nginx-proxy/data/conf.mount/:/etc/nginx/conf.mount/
  #     - /services/docker-compose/nginx-proxy/data/vhosts:/etc/nginx/vhost.d
  #     - /services/docker-compose/nginx-proxy/data/html:/usr/share/nginx/html
  #     - /services/docker-compose/nginx-proxy/data/certs:/etc/nginx/certs
  #     - /services/docker-compose/nginx-proxy/data/letsencrypt_user_data:/app/letsencrypt_user_data
  #     - /var/run/docker.sock:/var/run/docker.sock:ro

  #   environment:
  #     DEFAULT_EMAIL: "imesec@ime.usp.br"
  #     # ACME_CA_URI: "https://acme-staging-v02.api.letsencrypt.org/directory"
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.entrypoint == true

  bind:
    image: sameersbn/bind:latest
    environment:
      WEBMIN_ENABLED: "false"
    volumes:
      - /services/docker-compose/bind/data/:/data
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    deploy:
      placement:
        constraints:
          - node.labels.entrypoint == true

  # bookstack:
  #   image: solidnerd/bookstack:0.26.3
  #   # build: /services/bookstack
  #   depends_on:
  #   - bookstack_db
  #   env_file:
  #     /services/bookstack/data/bookstack.env
  #   volumes:
  #   - /services/bookstack/data/uploads:/var/www/bookstack/public/uploads
  #   - /services/bookstack/data/storage:/var/www/bookstack/public/storage
  #   - /services/bookstack/favicon.ico:/var/www/bookstack/public/favicon.ico
  #   environment:
  #     VIRTUAL_HOST: wiki.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: wiki.imesec.ime.usp.br

  # bookstack_db:
  #   image: mysql:5.7.21
  #   volumes:
  #   - /services/bookstack/data/mysql:/var/lib/mysql
  #   env_file:
  #     /services/bookstack/data/bookstack_db.env
  #   deploy:
  #     replicas: 1

  # # ctfd_beta:
  # #   image: ctfd/ctfd
  # #   environment:
  # #     VIRTUAL_HOST: betactf.imesec.ime.usp.br
  # #     LETSENCRYPT_HOST: betactf.imesec.ime.usp.br

  # minemap-proxy:
  #   image: mikesplain/nginx-proxy-pass
  #   deploy:
  #     replicas: 2
  #   environment:
  #     VIRTUAL_HOST: minemap.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: minemap.imesec.ime.usp.br
  #     TARGET_SERVER: "gaia.zt.imesec.ime.usp.br:8123"

  # ctfd:
  #   image: ctfd/ctfd
  #   env_file:
  #     /services/ctfd/ctfd.env
  #   environment:
  #     VIRTUAL_HOST: betactf.imesec.ime.usp.br
  #     LETSENCRYPT_HOST: betactf.imesec.ime.usp.br
  #   volumes:
  #     - /services/ctfd/data/CTFd/logs:/var/log/CTFd
  #     - /services/ctfd/data/CTFd/uploads:/var/uploads
  #   depends_on:
  #     - ctfd_db
  #     - ctfd_cache

  # ctfd_db:
  #   image: mariadb:10.4
  #   deploy:
  #     replicas: 1
  #   env_file:
  #     /services/ctfd/ctfd_db.env
  #   volumes:
  #     - /services/ctfd/data/mysql:/var/lib/mysql
  #   # This command is required to set important mariadb defaults
  #   command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]

  # ctfd_cache:
  #   image: redis:4
  #   deploy:
  #     replicas: 1
  #   volumes:
  #     - /services/ctfd/data/redis:/data

networks:
  default:
    driver: overlay

